<project name="bluejcheckstyle" default="all" basedir=".">

  <property name="extension-version" value="0.0.1" />
  <property name="extensionName" value="quality-tools-extension-${extension-version}" />

  <property name="bluejext.jar" value="lib/bluejext.jar" />
  <property name="checkstyle-all.jar" value="lib/checkstyle-all.jar" />

  <property name="dist.dir" value="target/dist" />
  <property name="dist.extensions.dir" value="${dist.dir}/${extensionName}/lib/extensions"/>
  <property name="dist.docs.dir" value="${dist.dir}/${extensionName}/docs/extensions/checkstyle"/>

  <path id="build.classpath">
    <pathelement location="${bluejext.jar}" />
    <pathelement location="${checkstyle-all.jar}" />
  </path>

  <path id="run.classpath">
    <pathelement location="target" />
    <path refid="build.classpath" />
  </path>

  <path id="javadoc.classpath">
    <pathelement location="lib" />
    <path refid="run.classpath" />
  </path>

  <path id="lib.classpath">
    <pathelement location="lib/junit.jar" />
    <pathelement location="lib/hamcrest-core.jar" />
  </path>


  <!-- Ensure all targets are run -->
  <target name="all" depends="clean, compile.all, test, build.extension,
    build.bindist, build.srcdist, javadoc" />

  <!-- -->
  <!-- Cleanup targets -->
  <!-- -->
  <target name="clean" description="Cleans any directories and generated files">
    <delete dir="target" />
    <delete dir="docs/reports" />
    <delete file="${extensionName}.jar" />
  </target>

  <!-- -->
  <!-- COMPILE TARGETS -->
  <!-- -->
  <target name="compile.all" description="Compiles the source code" depends="">
    <mkdir dir="target" />
    <javac srcdir="src/com"
      destdir="target"
      classpathref="build.classpath"
      deprecation="on" debug="on" includeantruntime="false">
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <!-- -->
  <!-- TEST TARGETS -->
  <!-- -->
  <target name="test" depends="clean, compile.all" description="Runs Junit tests">
    <mkdir dir="docs/reports" />
    <junit printsummary="withOutAndErr" haltonfailure="no" showoutput="true">
      <classpath>
        <path refid="lib.classpath" />
        <path location="${build.dir}" />
      </classpath>
      <formatter type="xml" />
      <formatter type="plain" usefile="false" />
      <formatter type="plain" />
      <batchtest fork="yes" todir="docs/reports">
        <fileset dir="src/tests" includes="**/*Test.java" />
      </batchtest>
    </junit>
  </target>

  <!-- -->
  <!-- DIST TARGETS -->
  <!-- -->
  <target name="build.extension" depends="clean, compile.all" description="Builds the extension jar file">
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${dist.extensions.dir}" />
    <jar jarfile="${dist.extensions.dir}/${extensionName}.jar"
      manifest="config/manifest.mf"
      update="false">
      <fileset dir="target"/>
      <fileset dir="docs">
        <include name="*.xml"/>
      </fileset>
      <zipfileset src="${checkstyle-all.jar}">
        <exclude name="META-INF/"/>
      </zipfileset>
    </jar>
    <copy todir=".">
      <fileset dir="${dist.extensions.dir}">
        <include name="${extensionName}.jar"/>
      </fileset>
    </copy>
  </target>

  <target name="build.bindist" depends="build.extension, javadoc"
      description="Builds the compressed distribution files">

    <delete dir="${dist.extensions.dir}/checkstyle" />
    <mkdir dir="${dist.extensions.dir}/checkstyle" />
    <mkdir dir="${dist.docs.dir}" />

    <!-- copy stuff without filtering -->
    <copy todir="${dist.docs.dir}">
      <fileset dir =".">
        <include name="LICENSE*"/>
        <include name="README"/>
        <include name="RIGHTS.antlr"/>
        <include name="contrib/**"/>
        <include name="**/.cvsignore"/>
        <include name="**/CVS"/>
      </fileset>
      <fileset dir="./docs">
        <include name="**"/>
        <exclude name="*.xml"/>
        <exclude name="*.txt"/>
        <exclude name="java.header"/>
      </fileset>
    </copy>
    <copy todir="${dist.extensions.dir}/checkstyle">
      <fileset dir="./docs">
        <include name="*.xml"/>
        <include name="java.header"/>
      </fileset>
      <fileset dir="./lib">
        <include name="checkstyle*.jar"/>
      </fileset>
    </copy>
    <!-- create the final zip & tar/gzip files -->
    <zip zipfile="${dist.dir}/checkstyle-extension-${extension-version}.zip">
      <fileset dir="${dist.dir}/${extensionName}">
        <include name="**"/>
      </fileset>
    </zip>
    <tar tarfile="${dist.dir}/checkstyle-extension-${extension-version}.tar" longfile="gnu"
      basedir="${dist.dir}/${extensionName}" includes="**" />
    <gzip zipfile="${dist.dir}/checkstyle-extension-${extension-version}.tar.gz"
      src="${dist.dir}/checkstyle-extension-${extension-version}.tar" />
  </target>

  <target name="build.srcdist"
    description="Builds the compressed source files for distribution">
    <delete dir="${dist.dir}/checkstyle-extension-src-${extension-version}" />
    <mkdir dir="${dist.dir}/checkstyle-extension-src-${extension-version}" />
    <copy todir="${dist.dir}/checkstyle-extension-src-${extension-version}">
      <fileset dir=".">
        <include name="LICENSE*"/>
        <include name="README"/>
        <include name="TODO"/>
        <include name="build.xml"/>
        <include name="config/**"/>
        <include name="docs/*"/>
        <include name="${bluejext.jar}"/>
        <include name="${checkstyle-all.jar}"/>
        <include name="${checkstyle-optional.jar}"/>
        <include name="src/**"/>
      </fileset>
    </copy>
    <!-- Produce the final distributions -->
    <zip zipfile="${dist.dir}/checkstyle-extension-src-${extension-version}.zip">
      <fileset dir="${dist.dir}">
        <include name="checkstyle-extension-src-${extension-version}/**"/>
      </fileset>
    </zip>
    <tar tarfile="${dist.dir}/checkstyle-extension-src-${extension-version}.tar" longfile="gnu"
      basedir="${dist.dir}" includes="checkstyle-extension-src-${extension-version}/**" />
    <gzip zipfile="${dist.dir}/checkstyle-extension-src-${extension-version}.tar.gz"
      src="${dist.dir}/checkstyle-extension-src-${extension-version}.tar" />
  </target>

  <target name="javadoc" depends="compile.all" description="Creates the javadoc html files">
    <mkdir dir="docs/api" />
    <javadoc 
      access="private"
      destdir="docs/api"
      Windowtitle="Code Quality Extension API"
      classpathref="javadoc.classpath"
      Use="true">
      <fileset dir="src" casesensitive="yes" defaultexcludes="yes">
        <filename name="**/*.java"/>
      </fileset>
    </javadoc>
  </target>

</project>
